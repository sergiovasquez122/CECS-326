prompt> ./process-run.py -l 5:100,5:100

produce a trace of what would happen when you
run these processes

Process 0		Process 1
running			ready
running			ready
running			ready
running			ready
running			ready
done			running
done			running
done			running
done			running
done			running

PID
1. running
2. wait
3. wait
4. wait
5. wait
6. running
7. wait
8. wait
9. wait
10. wait
11. running
12. wait
13. wait
14. wait
15. wait
16. done

actual output

Time    PID: 0       CPU       IOs
  1     RUN:io         1          
  2    WAITING                   1
  3    WAITING                   1
  4    WAITING                   1
  5    WAITING                   1
  6*    RUN:io         1          
  7    WAITING                   1
  8    WAITING                   1
  9    WAITING                   1
 10    WAITING                   1
 11*    RUN:io         1          
 12    WAITING                   1
 13    WAITING                   1
 14    WAITING                   1
 15    WAITING                   1
 16*      DONE         1

1. Run process-run.py with the following flags: -l 5:100,5:100.
What should the CPU utilization be (e.g., the percent of time the
CPU is in use?) Why do you know this? Use the -c and -p flags to
see if you were right.

process_0		process_1		
running			ready
running			ready
running			ready
running			ready
running			ready
done			running
done			running
done			running	
done			running
done			running

actual output

Time    PID: 0    PID: 1       CPU       IOs
  1    RUN:cpu     READY         1          
  2    RUN:cpu     READY         1          
  3    RUN:cpu     READY         1          
  4    RUN:cpu     READY         1          
  5    RUN:cpu     READY         1          
  6       DONE   RUN:cpu         1          
  7       DONE   RUN:cpu         1          
  8       DONE   RUN:cpu         1          
  9       DONE   RUN:cpu         1          
 10       DONE   RUN:cpu         1  

2. Now run with these flags: ./process-run.py -l 4:100,1:0.
These flags specify one process with 4 instructions (all to use the
CPU), and one that simply issues an I/O and waits for it to be done.
How long does it take to complete both processes? Use -c and -p
to find out if you were right.

time		process_0		process_1
1		running			ready
2		running			ready
3		running			ready
4		running			ready
5		done			running
6		done			waiting
7		done			waiting
8		done			waiting
9		done			waiting
10		done			done

3. switch the order of the processes: -l 1:0,4:100. What happens
now? Does switching the order matter? Why? (As always, use -c
and -p to see if you were right)

time		process_0		process_1
1		running			ready
2		waiting			running
3		waiting			running
4		waiting			running
5		waiting			running
6.		done			done

4. Weâ€™ll now explore some of the other flags. One important flag is
-S, which determines how the system reacts when a process is-
sues an I/O. With the flag set to SWITCH ON END, the system
will NOT switch to another process while one is doing I/O, in-
stead waiting until the process is completely finished. What hap-
pens when you run the following two processes (-l 1:0,4:100
-c -S SWITCH ON END), one doing I/O and the other doing CPU
work?

time		process_0		process_1
1		running			ready
2		waiting			ready
3		waiting			ready
4		waiting			ready
5		waiting			ready
6		done			running
7		done			running
8		done			running
9		done			running

5. Now, run the same processes, but with the switching behavior set
to switch to another process whenever one is WAITING for I/O (-l
1:0,4:100 -c -S SWITCH ON IO). What happens now? Use -c
and -p to confirm that you are right.

time		process_0		process_1
1		running			ready
2		waiting			running
3		waiting			running
4		waiting			running
5		waiting			running
6		done			done

6. One other important behavior is what to do when an I/O com-
pletes. With -I IO RUN LATER, when an I/O completes, the pro-
cess that issued it is not necessarily run right away; rather, whatever
was running at the time keeps running. What happens when you
run this combination of processes? (Run ./process-run.py -l
3:0,5:100,5:100,5:100 -S SWITCH ON IO -I IO RUN LATER
-c -p) Are system resources being effectively utilized?

time		process_0		process_1		process_2		process_3
1		running			ready			ready			ready
2		waiting			running			ready			ready
3		waiting			running			ready			ready
4		waiting			running			ready			ready
5		waiting			running			ready			ready	
6		ready			running			ready			ready	
7		ready			done			running			ready
8		ready			done			running			ready
9		ready			done			running			ready
10		ready			done			running			ready
11		ready			done			running			ready
12		ready			done			done			running
13		ready			done			done			running
14		ready			done			done			running	
15		ready			done			done			running
16		ready			done			done			running
17		running			done			done			done
18		waiting			done			done			done
19		waiting			done			done			done	
20		waiting			done			done			done
21		waiting			done			done			done
22		run			done			done			done
23		waiting			done			done			done
24		waiting			done			done			done
25		waiting			done			done			done
26		waiting			done			done			done
27		done			done			done			done	


